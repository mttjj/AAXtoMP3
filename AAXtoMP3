#!/usr/bin/env bash


# ========================================================================
# Command Line Options

# Usage Synopsis.
usage=$'\nUsage: AAXtoMP3 [--validate]\n{FILES}\n'
codec=copy                  # Default encoder.
extension=m4a               # Default encoder extention.
mode=single                 # Multi file output
auth_code=902ada06          # Required to be set via file or option.
container=m4b               # Just in case we need to change the container.  Used for M4A to M4B
VALIDATE=0                  # Validate the input aax file(s) only.  No Transcoding of files will occur
DEBUG=0                     # Default off, If set extremely verbose output.

# -----
# Code tip Do not have any script above this point that calls a function or a binary.  If you do
# the $1 will no longer be a ARGV element.  So you should only do basic variable setting above here.
#
# Process the command line options.  This allows for un-ordered options. Sorta like a getops style
while true; do
  case "$1" in
                      # Extremely verbose output.
    -d | --debug      ) DEBUG=1;                                                        shift ;;
                      # Validate ONLY the aax file(s) No transcoding occures
    -V | --validate   ) VALIDATE=1;                                                     shift ;;
                      # Command synopsis.
    -h | --help       ) printf "$usage" $0 ;                                            exit ;;
                      # Standard flag signifying the end of command line processing.
    --                )                                                                 shift; break ;;
                      # Anything else stops command line processing.
    *                 )                                                                 break ;;

  esac
done

# -----
# Empty argv means we have nothing to do so lets bark some help.
if [ "$#" -eq 0 ]; then
  printf "$usage" $0
  exit 1
fi

# Setup safer bash script defaults.
set -o errexit -o noclobber -o nounset -o pipefail

# ========================================================================
# Utility Functions

# -----
# debug
# debug "Some longish message"
debug() {
  if [ $DEBUG == 1 ] ; then
    echo "$(date "+%F %T%z") DEBUG ${1}"
  fi
}

# -----
# debug dump contents of a file to STDOUT
# debug "<full path to file>"
debug_file() {
  if [ $DEBUG == 1 ] ; then
    echo "$(date "+%F %T%z") DEBUG"
    echo "=Start=========================================================================="
    cat "${1}"
    echo "=End============================================================================"
  fi
}

# -----
# debug dump a list of internal script variables to STDOUT
# debug_vars "Some Message" var1 var2 var3 var4 var5
debug_vars() {
  if [ $DEBUG == 1 ] ; then
    msg="$1"; shift ; # Grab the message
    args=("$@")       # Grab the rest of the args

    # determine the length of the longest key
    l=0
    for (( n=0; n<${#args[@]}; n++ )) ; do
      (( "${#args[$n]}" > "$l" )) && l=${#args[$n]}
    done

    # Print the Debug Message
    echo "$(date "+%F %T%z") DEBUG ${msg}"
    echo "=Start=========================================================================="

    # Using the max length of a var name we dynamically create the format.
    fmt="%-"${l}"s = %s\n"

    for (( n=0; n<${#args[@]}; n++ )) ; do
      eval val="\$${args[$n]}"              ; # We save off the value of the var in question for ease of coding.

      echo "$(printf "${fmt}" ${args[$n]} "${val}" )"
    done
    echo "=End============================================================================"
  fi
}

# -----
# log
log() {
  echo "$(date "+%F %T%z") ${1}"
}

# -----
# Print out what we have already after command line processing.
debug_vars "Command line options as set" codec extension mode container targetdir completedir auth_code

# ========================================================================
# Variable validation

# -----
# Detect which annoying version fo grep we have
GREP=$(grep --version | grep -q GNU && echo "grep" || echo "ggrep")
if ! [[ $(type -P "$GREP") ]]; then
  echo "$GREP (GNU grep) is not in your PATH"
  echo "Without it, this script will break."
  echo "On macOS, you may want to try: brew install grep"
  exit 1
fi

# -----
# Detect which annoying version of sed we have
SED=$(sed --version 2>&1 | $GREP -q GNU && echo "sed" || echo "gsed")
if ! [[ $(type -P "$SED") ]]; then
  echo "$SED (GNU sed) is not in your PATH"
  echo "Without it, this script will break."
  echo "On macOS, you may want to try: brew install gnu-sed"
  exit 1
fi

# -----
# Detect ffmpeg and ffprobe
if [[ "x$(type -P ffmpeg)" == "x" ]]; then
  echo "ERROR ffmpeg was not found on your env PATH variable"
  echo "Without it, this script will break."
  echo "INSTALL:"
  echo "MacOS:   brew install ffmpeg"
  echo "Ubuntu:  sudo apt-get update; sudo apt-get install ffmpeg libav-tools x264 x265"
  echo "RHEL:    yum install ffmpeg"
  exit 1
fi

# -----
# Detect ffmpeg and ffprobe
if [[ "x$(type -P ffprobe)" == "x" ]]; then
  echo "ERROR ffprobe was not found on your env PATH variable"
  echo "Without it, this script will break."
  echo "INSTALL:"
  echo "MacOS:   brew install ffmpeg"
  echo "Ubuntu:  sudo apt-get update; sudo apt-get install ffmpeg libav-tools x264 x265"
  echo "RHEL:    yum install ffmpeg"
  exit 1
fi


# -----
# Detect if we need mp4art for cover additions to m4a & m4b files.
if [[ "x${extension}" == "xm4a" && "x$(type -P mp4art)" == "x" ]]; then
  echo "WARN mp4art was not found on your env PATH variable"
  echo "Without it, this script will not be able to add cover art to"
  echo "m4b files. Note if there are no other errors the AAXtoMP3 will"
  echo "continue. However no cover art will be added to the output."
  echo "INSTALL:"
  echo "MacOS:   brew install mp4v2"
  echo "Ubuntu:  sudo apt-get install mp4v2-utils"
fi

# -----
# Clean up if someone hits ^c or the script exits for any reason.
trap 'rm -r -f "${working_directory}"' EXIT

# -----
# Set up some basic working files ASAP.  Note the trap will clean this up no matter what.
working_directory=`mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir'`
metadata_file="${working_directory}/metadata.txt"

# -----
# Validate the AAX and extract the metadata associated with the file.
validate_aax() {
  local media_file
  media_file="$1"

  # Test for existance
  if [[ ! -r "${media_file}" ]] ; then
    log "ERROR File NOT Found: ${media_file}"
    return
  else
    if [[ "${VALIDATE}" == "1" ]]; then
      log "Test 1 SUCCESS: ${media_file}"
    fi
  fi

  # Clear the errexit value we want to capture the output of the ffprobe below.
  set +e errexit

  # Take a look at the aax file and see if it is valid.
  output="$(ffprobe -loglevel warning -activation_bytes ${auth_code} -i "${media_file}" 2>&1)"

  # If invalid then say something.
  if [[ $? != "0" ]] ; then
    # No matter what lets bark that something is wrong.
    log "ERROR: Invalid File: ${media_file}"
  elif [[ "${VALIDATE}" == "1" ]]; then
    # If the validate option is present then lets at least state what is valid.
    log "Test 2 SUCCESS: ${media_file}"
  fi

  # This is a big test only performed when the --validate swicth is passed.
  if [[ "${VALIDATE}" == "1" ]]; then
    output="$(ffmpeg -hide_banner -activation_bytes ${auth_code} -i "${media_file}" -vn -f null - 2>&1)"
    if [[ $? != "0" ]] ; then
      log "ERROR: Invalid File: ${media_file}"
    else
      log "Test 3 SUCCESS: ${media_file}"
    fi
  fi

  # Dump the output of the ffprobe command.
  debug "$output"

  # Turn it back on.  ffprobe is done.
  set -e errexit
}

# -----
# Inspect the AAX and extract the metadata associated with the file.
save_metadata() {
  local media_file
  media_file="$1"
  ffprobe -i "$media_file" 2> "$metadata_file"
  debug "Metadata file $metadata_file"
  debug_file "$metadata_file"
}

# -----
# Reach into the meta data and extract a specific value.
#   This is a long pipe of transforms.
#   This finds the first occurance of the key : value pair.
get_metadata_value() {
  local key
  key="$1"
        # Find the key in the meta data file                                  # Extract field value     # Remove the following /'s  "(Unabridged)  <blanks> at start end and multiples.
  echo "$($GREP --max-count=1 --only-matching "${key} *: .*" "$metadata_file" | cut -d : -f 2- | $SED -e 's#/##g;s/ (Unabridged)//;s/^[[:blank:]]\+//g;s/[[:blank:]]\+$//g' | $SED 's/[[:blank:]]\+/ /g')"
}

# -----
# specific varient of get_metadata_value bitrate is important for transcoding.
get_bitrate() {
  get_metadata_value bitrate | $GREP --only-matching '[0-9]\+'
}

# ========================================================================
# Main Transcode Loop
for aax_file
do

  # Validate the input aax file.  Note this happens no matter what.
  # It's just that if the validate option is set then we skip to next file.
  # If however vlaidate is not set and we proceed with the script any errors will
  # case the script to stop.
  validate_aax "${aax_file}"
  if [[ ${VALIDATE} == "1" ]] ; then
    # Don't bother doing anything else with this file.
    continue
  fi

  # -----
  # Make sure everything is a variable.  Simplifying Command interpretation
  save_metadata "${aax_file}"
  genre=$(get_metadata_value genre)
  artist=$(get_metadata_value artist)
  title=$(get_metadata_value title | $SED 's/'\:'/'-'/g' | $SED 's/- /-/g' | xargs -0)
  file_name=${aax_file##*/}
  output_directory="$(dirname "${aax_file}")"
  output_file="${output_directory}/${file_name/.aax/}.${extension}"
  bitrate="$(get_bitrate)k"
  album_artist="$(get_metadata_value album_artist)"
  album="$(get_metadata_value album)"
  album_date="$(get_metadata_value date)"
  copyright="$(get_metadata_value copyright)"

  mkdir -p "${output_directory}"

  # Fancy declartion of which book we are decoding.  Including the AUTHCODE.
  dashline="----------------------------------------------------"
  log "$(printf '\n----Decoding---%s%s--%s--' "${title}" "${dashline:${#title}}" "${auth_code}")"
  log "Source ${aax_file}"

  # Big long DEBUG output.  Fully describes the settings used for transcoding.
  # Not this is a long debug command. It's not critical to operation. It's purely for people debugging
  # and coders wanting to extend the script.
  debug_vars "Book and Variable values" title auth_code mode aax_file container codec bitrate artist album_artist album album_date genre copyright output_file metadata_file working_directory

  # -----
  # This is the main work horse command.  This is the primary transcoder.
  # This is the primary transcode. All the heavy lifting is here.
  debug 'ffmpeg -loglevel error -stats -activation_bytes "${auth_code}" -i "${aax_file}" -vn -codec:a "${codec}" -ab ${bitrate} -map_metadata -1 -metadata title="${title}" -metadata artist="${artist}" -metadata album_artist="${album_artist}" -metadata album="${album}" -metadata date="${album_date}" -metadata track="1/1" -metadata genre="${genre}" -metadata copyright="${copyright}" "${output_file}"'
  </dev/null ffmpeg -loglevel error -stats -activation_bytes "${auth_code}" -i "${aax_file}" -vn -codec:a "${codec}" -ab ${bitrate} -map_metadata -1 -metadata title="${title}" -metadata artist="${artist}" -metadata album_artist="${album_artist}" -metadata album="${album}" -metadata date="${album_date}" -metadata track="1/1" -metadata genre="${genre}" -metadata copyright="${copyright}" "${output_file}"

  log "Created ${output_file}."
  # -----

  # Grab the cover art if available.
  cover_file="${output_directory}/cover.jpg"
  log "Extracting cover into ${cover_file}..."
  </dev/null ffmpeg -loglevel error -activation_bytes "${auth_code}" -i "${aax_file}" -an -codec:v copy "${cover_file}"

# Perform file tasks on output file.
# ----
# Add the cover art to m4a and m4b file types.
if [[ ${extension} == "m4a" && $(type -P mp4art) ]]; then
  mp4art -q --add "${cover_file}" "${output_file}"
  log "Added cover art to ${title}.${extension}"
fi
# ----
# Detect if we are actuall m4b instead of m4a Then rename the file.
if [[ ${extension} == "m4a" && ${container}="m4b" ]]; then
  mv "${output_file}" "${output_file/.m4a/.m4b}"
fi

  # -----
  # Announce that we have completed the transcode
  log "Complete ${title}"
  # Lastly get rid of any extra stuff.
  rm "${metadata_file}"
  rm "${cover_file}"

done